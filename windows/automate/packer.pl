#!/usr/bin/perl

use strict;
use warnings;

use Win32::Packer;
use Path::Tiny;
use Log::Any::Adapter;

use Getopt::Std;

my $app_name = 'qvd-automate';

our $opt_f;
our $opt_o;
our $opt_u;
our $opt_t = 'msi';

getopts('fut:o:');

my $guid =
    # generated by Someone, Somewhere in Summertime!
    # and then mangled by that same someone in the Autumn, baby!
    '5a934fd2-bccc-402a-8f0e-96a3b42776f9';

Log::Any::Adapter->set(Stderr => log_level => 'debug');
my $logger = Log::Any->get_logger;

my $this_path = path($0)->realpath->parent;

my $license = $this_path->child('LICENSE.RTF');
$license->is_file or die "File not found at $license";

if ($opt_f) {
    $this_path->child('automate.pl')->copy("$app_name/lib/automate.pl");
    $this_path->child('automate.yaml')->copy("$app_name/automate.yaml");
}
else {
    my $p = Win32::Packer->new( app_name => $app_name,
                                app_vendor => 'Qindel FormaciÃ³n y Servicios SL',
                                app_version => '0.0',
                                app_comments => "Under Attack, I'm taking cover",
                                app_id => $guid,
                                license => $license,
                                scripts => [ { path => $this_path->child('automate.pl'),
                                               require_administrator => 1 },
                                             { path => $this_path->child('automate.pl'),
                                               require_administrator => 0,
                                               basename => 'automate_user' } ],

                                extra_module => [qw(if IO::Socket::SSL IO::Socket::IP)],
                                extra_file => $this_path->child('automate.yaml'),
                                logger => $logger,
                                work_dir => $this_path->child('wd'),
                                output_dir => $opt_o);

    $p->make_installer(type => $opt_t, update => $opt_u);
}

=head1 NAME

qvd-automate-packer

